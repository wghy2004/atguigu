<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd    
    http://www.springframework.org/schema/tx    
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-4.1.xsd 
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd  
    http://www.springframework.org/schema/mvc   
    http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
    http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task-4.1.xsd">

	<!-- Spring MVC配置 -->
	<context:annotation-config />
	<!--扫描注解 -->
	<context:component-scan base-package="com.atguigu" />
	<!--默认的mvc注解映射的支持 -->
	<!-- 支持异步方法执行 -->
	<task:annotation-driven />
	
	


	<!-- 视图解析器和json解析器
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="viewResolvers">
			<list>
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/WEB-INF/jsp/" /> 
					<property name="suffix" value=".jsp" />
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<bean
					class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
			</list>
		</property>
	</bean>
 -->
	<!-- 文件上传解析器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="-1" />
	</bean>

	<!-- 总错误处理 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView">
			<value>/error</value>
		</property>
		<property name="defaultStatusCode">
			<value>500</value>
		</property>
		<property name="warnLogCategory">
			<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver
			</value>
		</property>
	</bean>


	<!-- 强制使用CGLIB代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 定义数据源 -->
	<bean id="masterDataSource" parent="parentDataSource">
		<property name="url" value="${master.jdbc.url}" />
		<property name="username" value="${master.jdbc.username}" />
		<property name="password" value="${master.jdbc.password}" />
	</bean>

	<bean id="slaveDataSource" parent="parentDataSource">
		<property name="url" value="${slave.jdbc.url}" />
		<property name="username" value="${slave.jdbc.username}" />
		<property name="password" value="${slave.jdbc.password}" />
	</bean>

	<bean id="dynamicDataSource" class="com.atguigu.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="master" value-ref="masterDataSource" />
				<entry key="slave" value-ref="slaveDataSource" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="masterDataSource" />
	</bean>

	<!-- 数据源定义,使用Apache DBCP 连接池 -->
	<bean id="parentDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="initialSize" value="10"></property><!-- 初始化连接 默认：0 -->
		<property name="maxActive" value="50"></property><!-- 最大连接数量 默认：8 -->
		<property name="maxIdle" value="20"></property><!-- 最大空闲连接 默认：8 -->
		<property name="minIdle" value="10"></property><!-- 最小空闲连接 默认：0 连接池中容许保持空闲状态的最小连接数量，低于这个数量将创建新的连接 
			设置0则不创建 -->
		<property name="maxWait" value="1000"></property><!-- 超时等待时间以毫秒为单位 默认：无限 
			代表当connection用尽了，多久之后进行回收丢失连接 -->
		<property name="validationQuery" value="select 1"></property><!-- 测试链接是否可以用的sql -->
		<property name="testOnBorrow" value="true"></property><!-- 从链接池中取链接时是否进行可用性测 -->
		<property name="testWhileIdle" value="true"></property><!-- 回收数据库链接时是否进行可用性测试 -->


		<property name="logAbandoned" value="true"></property><!--默认：false 是否在自动回收超时时连接的时候打印连接的超时错误 -->
		<property name="removeAbandoned" value="true"></property><!-- 默认：false 
			是否自动回收超时连接 -->
		<property name="removeAbandonedTimeout" value="180"></property><!-- 
			默认：300 超时时间(以秒数未单位) -->
	</bean>

	<!-- 定义事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dynamicDataSource" />
		</property>
	</bean>

	<!-- 配置事务特性 ，配置add、delete和update开始的方法，事务传播特性为required -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="login*" propagation="REQUIRED" />
			<tx:method name="regist*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!--启动spring注解功能 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 配置那些类的方法进行事务管理 -->
	<aop:config>
		<aop:pointcut id="allManagerMethod"
			expression="execution (* com.atguigu..service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod" />
	</aop:config>

	<!-- mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
		<property name="mapperLocations" value="classpath:mapper/mysql/**/*Mapper.xml"></property>
	</bean>

	<!-- 配置SQLSession模板 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

</beans> 